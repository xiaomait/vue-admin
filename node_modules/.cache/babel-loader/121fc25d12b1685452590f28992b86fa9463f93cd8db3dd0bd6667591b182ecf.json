{"ast":null,"code":"import { updateUserInfoAPI } from \"@/api\";\nexport default {\n  name: \"UserInfo\",\n  data() {\n    return {\n      userForm: {\n        username: this.$store.state.userInfo.username,\n        // 默认值用登录后获取到的用户名\n        nickname: \"\",\n        email: \"\"\n      },\n      // 表单的验证规则对象\n      userFormRules: {\n        nickname: [{\n          required: true,\n          message: \"请输入用户昵称\",\n          trigger: \"blur\"\n        }, {\n          pattern: /^\\S{1,10}$/,\n          message: \"昵称必须是1-10位的非空字符串\",\n          trigger: \"blur\"\n        }],\n        email: [{\n          required: true,\n          message: \"请输入用户邮箱\",\n          trigger: \"blur\"\n        }, {\n          type: \"email\",\n          message: \"邮箱格式不正确\",\n          trigger: \"blur\"\n        }]\n      }\n    };\n  },\n  methods: {\n    // 提交修改\n    submitFn() {\n      // 验证表单的合法性\n      this.$refs.userFormRef.validate(async valid => {\n        if (valid) {\n          // 验证成功\n          console.log(this.userForm);\n          // 根据接口文档指示, 需要携带id(必须)\n          this.userForm.id = this.$store.state.userInfo.id;\n          // 调用更新用户基本信息接口, 把用户在页面输入的新内容传给后台保存\n          const {\n            data: res\n          } = await updateUserInfoAPI(this.userForm);\n          // console.log(res);\n          if (res.code !== 0) return this.$message.error(\"更新用户信息失败！\");\n          // 更新用户信息成功，刷新 Vuex 中的数据\n          this.$message.success(\"更新成功！\");\n          // 重新让vuex获取下最新的用户数据\n          this.$store.dispatch(\"initUserInfo\");\n        } else {\n          // 验证失败\n          return false;\n        }\n      });\n    },\n    resetFn() {\n      this.$refs.userFormRef.resetFields();\n    }\n  }\n};","map":{"version":3,"mappings":"AAkCA;AACA;EACAA;EACAC;IACA;MACAC;QACAC;QAAA;QACAC;QACAC;MACA;MACA;MACAC;QACAF,WACA;UAAAG;UAAAC;UAAAC;QAAA,GACA;UACAC;UACAF;UACAC;QACA,EACA;QACAJ,QACA;UAAAE;UAAAC;UAAAC;QAAA,GACA;UAAAE;UAAAH;UAAAC;QAAA;MAEA;IACA;EACA;EACAG;IACA;IACAC;MACA;MACA;QACA;UACA;UACAC;UACA;UACA;UACA;UACA;YAAAb;UAAA;UACA;UACA;UACA;UACA;UACA;UACA;QACA;UACA;UACA;QACA;MACA;IACA;IACAc;MACA;IACA;EACA;AACA","names":["name","data","userForm","username","nickname","email","userFormRules","required","message","trigger","pattern","type","methods","submitFn","console","resetFn"],"sourceRoot":"src/views/User","sources":["userInfo.vue"],"sourcesContent":["<template>\n  <el-card class=\"box-card\">\n    <div slot=\"header\" class=\"clearfix\">\n      <span>基本资料</span>\n    </div>\n    <!-- 表单 -->\n    <el-form\n      :model=\"userForm\"\n      :rules=\"userFormRules\"\n      ref=\"userFormRef\"\n      label-width=\"100px\"\n    >\n      <el-form-item label=\"登录名称\" prop=\"username\">\n        <el-input v-model=\"userForm.username\" disabled></el-input>\n      </el-form-item>\n      <el-form-item label=\"用户昵称\" prop=\"nickname\">\n        <el-input\n          v-model=\"userForm.nickname\"\n          minlength=\"1\"\n          maxlength=\"10\"\n        ></el-input>\n      </el-form-item>\n      <el-form-item label=\"用户邮箱\" prop=\"email\">\n        <el-input v-model=\"userForm.email\"></el-input>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" @click=\"submitFn\">提交修改</el-button>\n        <el-button @click=\"resetFn\">重置</el-button>\n      </el-form-item>\n    </el-form>\n  </el-card>\n</template>\n\n<script>\nimport { updateUserInfoAPI } from \"@/api\";\nexport default {\n  name: \"UserInfo\",\n  data() {\n    return {\n      userForm: {\n        username: this.$store.state.userInfo.username, // 默认值用登录后获取到的用户名\n        nickname: \"\",\n        email: \"\",\n      },\n      // 表单的验证规则对象\n      userFormRules: {\n        nickname: [\n          { required: true, message: \"请输入用户昵称\", trigger: \"blur\" },\n          {\n            pattern: /^\\S{1,10}$/,\n            message: \"昵称必须是1-10位的非空字符串\",\n            trigger: \"blur\",\n          },\n        ],\n        email: [\n          { required: true, message: \"请输入用户邮箱\", trigger: \"blur\" },\n          { type: \"email\", message: \"邮箱格式不正确\", trigger: \"blur\" },\n        ],\n      },\n    };\n  },\n  methods: {\n    // 提交修改\n    submitFn() {\n      // 验证表单的合法性\n      this.$refs.userFormRef.validate(async (valid) => {\n        if (valid) {\n          // 验证成功\n          console.log(this.userForm);\n          // 根据接口文档指示, 需要携带id(必须)\n          this.userForm.id = this.$store.state.userInfo.id;\n          // 调用更新用户基本信息接口, 把用户在页面输入的新内容传给后台保存\n          const { data: res } = await updateUserInfoAPI(this.userForm);\n          // console.log(res);\n          if (res.code !== 0) return this.$message.error(\"更新用户信息失败！\");\n          // 更新用户信息成功，刷新 Vuex 中的数据\n          this.$message.success(\"更新成功！\");\n          // 重新让vuex获取下最新的用户数据\n          this.$store.dispatch(\"initUserInfo\");\n        } else {\n          // 验证失败\n          return false;\n        }\n      });\n    },\n    resetFn() {\n      this.$refs.userFormRef.resetFields();\n    },\n  },\n};\n</script>\n\n<style lang=\"less\" scoped>\n.el-form {\n  width: 500px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}