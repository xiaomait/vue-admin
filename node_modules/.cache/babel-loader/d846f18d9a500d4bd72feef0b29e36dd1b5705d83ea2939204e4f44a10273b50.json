{"ast":null,"code":"import { updateAvatarAPI } from \"@/api\";\nexport default {\n  name: \"UserAvatar\",\n  data() {\n    return {\n      avatar: \"\"\n    };\n  },\n  methods: {\n    // 选择图片->点击事件->让选择框出现\n    chooseImg() {\n      // 模拟点击行为\n      this.$refs.iptRef.click();\n    },\n    // 在选择框中选择图片后触发的改变事件\n    onFileChange(e) {\n      // 获取用户选择的文件列表（伪数组）\n      const files = e.target.files;\n      if (files.length === 0) {\n        // 没有选择图片\n        this.avatar = \"\";\n      } else {\n        // 选择了图片\n        // 1. 创建 FileReader 对象\n        const fr = new FileReader();\n        // 2. 调用 readAsDataURL 函数，读取文件内容\n        fr.readAsDataURL(files[0]);\n        // 3. 监听 fr 的 onload 事件\n        fr.onload = async e => {\n          // 4. 通过 e.target.result 获取到读取的结果，值是字符串（base64 格式的字符串）\n          this.avatar = e.target.result;\n          // 5. 调用接口, 传递给后台并根据返回结果给用户提示\n          const {\n            data: res\n          } = await updateAvatarAPI(this.avatar);\n          console.log(res);\n          if (res.code !== 0) return this.$message.error(\"上传头像失败！\");\n          this.$message.success(\"上传头像成功！\");\n          this.$store.dispatch(\"initUserInfo\");\n        };\n\n        // 使用URL.createObjURL()来转换文件变成图片地址(纯前端本地)\n        // this.avatar = URL.createObjectURL(files[0])\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"AAuCA;AACA;EACAA;EACAC;IACA;MACAC;IACA;EACA;EACAC;IACA;IACAC;MACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;QACA;QACA;MACA;QACA;QACA;QACA;QACA;QACAC;QACA;QACAA;UACA;UACA;UACA;UACA;YAAAL;UAAA;UACAM;UACA;UACA;UACA;QACA;;QAEA;QACA;MACA;IACA;EACA;AACA","names":["name","data","avatar","methods","chooseImg","onFileChange","fr","console"],"sourceRoot":"src/views/User","sources":["userAvatar.vue"],"sourcesContent":["<template>\n  <el-card class=\"box-card\">\n    <div slot=\"header\" class=\"clearfix\">\n      <span>更换头像</span>\n    </div>\n    <div>\n      <!-- 图片，用来展示用户选择的头像 -->\n      <img\n        class=\"the_img\"\n        v-if=\"!this.avatar\"\n        src=\"../../assets/images/avatar.jpg\"\n        alt=\"\"\n      />\n      <img class=\"the_img\" v-else :src=\"this.avatar\" alt=\"\" />\n\n      <!-- 按钮区域 -->\n      <div class=\"btn-box\">\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          style=\"display: none\"\n          ref=\"iptRef\"\n          @change=\"onFileChange\"\n        />\n        <el-button type=\"primary\" icon=\"el-icon-plus\" @click=\"chooseImg\"\n          >选择图片</el-button\n        >\n        <el-button\n          type=\"success\"\n          icon=\"el-icon-upload\"\n          :disabled=\"avatar === ''\"\n          >上传头像</el-button\n        >\n      </div>\n    </div>\n  </el-card>\n</template>\n\n<script>\nimport { updateAvatarAPI } from \"@/api\";\nexport default {\n  name: \"UserAvatar\",\n  data() {\n    return {\n      avatar: \"\",\n    };\n  },\n  methods: {\n    // 选择图片->点击事件->让选择框出现\n    chooseImg() {\n      // 模拟点击行为\n      this.$refs.iptRef.click();\n    },\n    // 在选择框中选择图片后触发的改变事件\n    onFileChange(e) {\n      // 获取用户选择的文件列表（伪数组）\n      const files = e.target.files;\n      if (files.length === 0) {\n        // 没有选择图片\n        this.avatar = \"\";\n      } else {\n        // 选择了图片\n        // 1. 创建 FileReader 对象\n        const fr = new FileReader();\n        // 2. 调用 readAsDataURL 函数，读取文件内容\n        fr.readAsDataURL(files[0]);\n        // 3. 监听 fr 的 onload 事件\n        fr.onload = async (e) => {\n          // 4. 通过 e.target.result 获取到读取的结果，值是字符串（base64 格式的字符串）\n          this.avatar = e.target.result;\n          // 5. 调用接口, 传递给后台并根据返回结果给用户提示\n          const { data: res } = await updateAvatarAPI(this.avatar);\n          console.log(res);\n          if (res.code !== 0) return this.$message.error(\"上传头像失败！\");\n          this.$message.success(\"上传头像成功！\");\n          this.$store.dispatch(\"initUserInfo\");\n        };\n\n        // 使用URL.createObjURL()来转换文件变成图片地址(纯前端本地)\n        // this.avatar = URL.createObjectURL(files[0])\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"less\" scoped>\n.btn-box {\n  margin-top: 10px;\n}\n.preview {\n  object-fit: cover;\n}\n.the_img {\n  width: 350px;\n  height: 350px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}