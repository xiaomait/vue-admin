{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport store from \"@/store\";\n\n// 创建axios实例\nconst request = axios.create({\n  baseURL: \"http://big-event-vue-api-t.itheima.net\",\n  // api的base_url\n  timeout: 5000 // 请求超时时间\n});\n\n// 白名单: 不需要携带token的api地址\n// const whiteAPIList = ['/api/reg', '/api/login']\n\n// 请求拦截器\nrequest.interceptors.request.use(config => {\n  if (store.state.token) {\n    // 为请求头挂载 Authorization 字段\n    config.headers.Authorization = store.state.token;\n  }\n  return config;\n}, error => {\n  // Do something with request error\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nrequest.interceptors.response.use(response => {\n  // 响应状态码为 2xx 时触发成功的回调，形参中的 response 是“成功的结果”\n  return response;\n}, error => {\n  // 响应状态码不是 2xx 时触发失败的回调，形参中的 error 是“失败的结果”\n  if (error.response.status === 401) {\n    // 无效的 token\n    // 把 Vuex 中的 token 重置为空，并跳转到登录页面\n    store.commit(\"updateToken\", \"\");\n    router.push(\"/login\");\n  }\n  return Promise.reject(error);\n});\nexport const baseURL = \"http://big-event-vue-api-t.itheima.net\";\nexport default request;","map":{"version":3,"names":["axios","store","request","create","baseURL","timeout","interceptors","use","config","state","token","headers","Authorization","error","Promise","reject","response","status","commit","router","push"],"sources":["/Users/xiaoma/Desktop/Vue/vue-admin/src/utils/request.js"],"sourcesContent":["import axios from \"axios\";\nimport store from \"@/store\";\n\n// 创建axios实例\nconst request = axios.create({\n  baseURL: \"http://big-event-vue-api-t.itheima.net\", // api的base_url\n  timeout: 5000, // 请求超时时间\n});\n\n// 白名单: 不需要携带token的api地址\n// const whiteAPIList = ['/api/reg', '/api/login']\n\n// 请求拦截器\nrequest.interceptors.request.use(\n  (config) => {\n    if (store.state.token) {\n      // 为请求头挂载 Authorization 字段\n      config.headers.Authorization = store.state.token;\n    }\n    return config;\n  },\n  (error) => {\n    // Do something with request error\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器\nrequest.interceptors.response.use(\n  (response) => {\n    // 响应状态码为 2xx 时触发成功的回调，形参中的 response 是“成功的结果”\n    return response;\n  },\n  (error) => {\n    // 响应状态码不是 2xx 时触发失败的回调，形参中的 error 是“失败的结果”\n    if (error.response.status === 401) {\n      // 无效的 token\n      // 把 Vuex 中的 token 重置为空，并跳转到登录页面\n      store.commit(\"updateToken\", \"\");\n      router.push(\"/login\");\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const baseURL = \"http://big-event-vue-api-t.itheima.net\";\nexport default request;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,SAAS;;AAE3B;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC3BC,OAAO,EAAE,wCAAwC;EAAE;EACnDC,OAAO,EAAE,IAAI,CAAE;AACjB,CAAC,CAAC;;AAEF;AACA;;AAEA;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAC7BC,MAAM,IAAK;EACV,IAAIP,KAAK,CAACQ,KAAK,CAACC,KAAK,EAAE;IACrB;IACAF,MAAM,CAACG,OAAO,CAACC,aAAa,GAAGX,KAAK,CAACQ,KAAK,CAACC,KAAK;EAClD;EACA,OAAOF,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CACF;;AAED;AACAX,OAAO,CAACI,YAAY,CAACU,QAAQ,CAACT,GAAG,CAC9BS,QAAQ,IAAK;EACZ;EACA,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT;EACA,IAAIA,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACjC;IACA;IACAhB,KAAK,CAACiB,MAAM,CAAC,aAAa,EAAE,EAAE,CAAC;IAC/BC,MAAM,CAACC,IAAI,CAAC,QAAQ,CAAC;EACvB;EACA,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CACF;AAED,OAAO,MAAMT,OAAO,GAAG,wCAAwC;AAC/D,eAAeF,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}