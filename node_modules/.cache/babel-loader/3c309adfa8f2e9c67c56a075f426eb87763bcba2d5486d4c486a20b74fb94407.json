{"ast":null,"code":"import store from \"@/store\";\nimport Vue from \"vue\";\nimport VueRouter from \"vue-router\";\nVue.use(VueRouter);\nconst routes = [{\n  path: \"/\",\n  component: () => import(\"@/views/Layout\"),\n  redirect: \"/home\",\n  children: [{\n    path: \"home\",\n    component: () => import(\"@/views/Home\")\n  }, {\n    path: \"user-info\",\n    // 这里必须叫user-info, 因为侧边栏导航切换的是它\n    component: () => import(\"@/views/User/userInfo\")\n  }, {\n    path: \"user-avatar\",\n    // 必须用这个值\n    component: () => import(\"@/views/User/userAvatar\")\n  }, {\n    path: \"user-pwd\",\n    // 必须用这个值\n    component: () => import(\"@/views/User/userPwd\")\n  }, {\n    path: \"art-cate\",\n    // 文章分类\n    component: () => import(\"@/views/Article/artCate\")\n  }, {\n    path: \"art-list\",\n    // 文章列表\n    component: () => import(\"@/views/Article/artList\")\n  }]\n}, {\n  path: \"/login\",\n  component: () => import(\"@/views/Login\")\n}, {\n  path: \"/reg\",\n  component: () => import(\"@/views/Register\")\n}];\nconst router = new VueRouter({\n  mode: \"history\",\n  base: process.env.BASE_URL,\n  routes\n});\n\n// 无需验证token的页面\nconst whiteList = [\"/login\", \"/reg\"];\n//全局前置路由守卫\nrouter.beforeEach((to, from, next) => {\n  const token = store.state.token;\n  if (token) {\n    // if (!store.state.userInfo.username) {\n    //   // 有token但是没有用户信息, 才去请求用户信息保存到vuex里\n    //   // 调用actions里方法请求数据\n    //   store.dispatch(\"initUserInfo\");\n    //   // 下次切换页面vuex里有用户信息数据就不会重复请求用户信息\n    // }\n    next(); // 路由放行\n  } else if (whiteList.includes(to.path)) {\n    next();\n  } else {\n    next(\"/login\");\n  }\n});\nexport default router;","map":{"version":3,"names":["store","Vue","VueRouter","use","routes","path","component","redirect","children","router","mode","base","process","env","BASE_URL","whiteList","beforeEach","to","from","next","token","state","includes"],"sources":["/Users/xiaoma/Desktop/Vue/vue-admin/src/router/index.js"],"sourcesContent":["import store from \"@/store\";\nimport Vue from \"vue\";\nimport VueRouter from \"vue-router\";\n\nVue.use(VueRouter);\n\nconst routes = [\n  {\n    path: \"/\",\n    component: () => import(\"@/views/Layout\"),\n    redirect: \"/home\",\n    children: [\n      {\n        path: \"home\",\n        component: () => import(\"@/views/Home\"),\n      },\n      {\n        path: \"user-info\", // 这里必须叫user-info, 因为侧边栏导航切换的是它\n        component: () => import(\"@/views/User/userInfo\"),\n      },\n      {\n        path: \"user-avatar\", // 必须用这个值\n        component: () => import(\"@/views/User/userAvatar\"),\n      },\n      {\n        path: \"user-pwd\", // 必须用这个值\n        component: () => import(\"@/views/User/userPwd\"),\n      },\n      {\n        path: \"art-cate\", // 文章分类\n        component: () => import(\"@/views/Article/artCate\"),\n      },\n      {\n        path: \"art-list\", // 文章列表\n        component: () => import(\"@/views/Article/artList\"),\n      },\n    ],\n  },\n  {\n    path: \"/login\",\n    component: () => import(\"@/views/Login\"),\n  },\n  {\n    path: \"/reg\",\n    component: () => import(\"@/views/Register\"),\n  },\n];\n\nconst router = new VueRouter({\n  mode: \"history\",\n  base: process.env.BASE_URL,\n  routes,\n});\n\n// 无需验证token的页面\nconst whiteList = [\"/login\", \"/reg\"];\n//全局前置路由守卫\nrouter.beforeEach((to, from, next) => {\n  const token = store.state.token;\n  if (token) {\n    // if (!store.state.userInfo.username) {\n    //   // 有token但是没有用户信息, 才去请求用户信息保存到vuex里\n    //   // 调用actions里方法请求数据\n    //   store.dispatch(\"initUserInfo\");\n    //   // 下次切换页面vuex里有用户信息数据就不会重复请求用户信息\n    // }\n    next(); // 路由放行\n  } else if (whiteList.includes(to.path)) {\n    next();\n  } else {\n    next(\"/login\");\n  }\n});\n\nexport default router;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,SAAS;AAC3B,OAAOC,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAElCD,GAAG,CAACE,GAAG,CAACD,SAAS,CAAC;AAElB,MAAME,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,SAAS,EAAE,MAAM,MAAM,CAAC,gBAAgB,CAAC;EACzCC,QAAQ,EAAE,OAAO;EACjBC,QAAQ,EAAE,CACR;IACEH,IAAI,EAAE,MAAM;IACZC,SAAS,EAAE,MAAM,MAAM,CAAC,cAAc;EACxC,CAAC,EACD;IACED,IAAI,EAAE,WAAW;IAAE;IACnBC,SAAS,EAAE,MAAM,MAAM,CAAC,uBAAuB;EACjD,CAAC,EACD;IACED,IAAI,EAAE,aAAa;IAAE;IACrBC,SAAS,EAAE,MAAM,MAAM,CAAC,yBAAyB;EACnD,CAAC,EACD;IACED,IAAI,EAAE,UAAU;IAAE;IAClBC,SAAS,EAAE,MAAM,MAAM,CAAC,sBAAsB;EAChD,CAAC,EACD;IACED,IAAI,EAAE,UAAU;IAAE;IAClBC,SAAS,EAAE,MAAM,MAAM,CAAC,yBAAyB;EACnD,CAAC,EACD;IACED,IAAI,EAAE,UAAU;IAAE;IAClBC,SAAS,EAAE,MAAM,MAAM,CAAC,yBAAyB;EACnD,CAAC;AAEL,CAAC,EACD;EACED,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAE,MAAM,MAAM,CAAC,eAAe;AACzC,CAAC,EACD;EACED,IAAI,EAAE,MAAM;EACZC,SAAS,EAAE,MAAM,MAAM,CAAC,kBAAkB;AAC5C,CAAC,CACF;AAED,MAAMG,MAAM,GAAG,IAAIP,SAAS,CAAC;EAC3BQ,IAAI,EAAE,SAAS;EACfC,IAAI,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ;EAC1BV;AACF,CAAC,CAAC;;AAEF;AACA,MAAMW,SAAS,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC;AACpC;AACAN,MAAM,CAACO,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,KAAK,GAAGpB,KAAK,CAACqB,KAAK,CAACD,KAAK;EAC/B,IAAIA,KAAK,EAAE;IACT;IACA;IACA;IACA;IACA;IACA;IACAD,IAAI,EAAE,CAAC,CAAC;EACV,CAAC,MAAM,IAAIJ,SAAS,CAACO,QAAQ,CAACL,EAAE,CAACZ,IAAI,CAAC,EAAE;IACtCc,IAAI,EAAE;EACR,CAAC,MAAM;IACLA,IAAI,CAAC,QAAQ,CAAC;EAChB;AACF,CAAC,CAAC;AAEF,eAAeV,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}