{"ast":null,"code":"// 导入默认的封面图片\nimport defaultImg from \"@/assets/images/cover.jpg\";\nimport { getArtCateListAPI, uploadArticleAPI, getArticleListAPI, getArticleDetailFn } from \"@/api\";\nexport default {\n  name: \"ArtList\",\n  created() {\n    this.initCateList();\n    this.initArtListFn();\n  },\n  data() {\n    return {\n      // 查询参数对象\n      q: {\n        pagenum: 1,\n        pagesize: 10,\n        cate_id: \"\",\n        state: \"\"\n      },\n      artList: [],\n      // 文章的列表数据\n      total: 0,\n      // 总数据条数\n      pubDialogVisible: false,\n      // 控制发表文章对话框的显示与隐藏\n      cateList: [],\n      // 文章分类\n      pubForm: {\n        // 表单的数据对象\n        title: \"\",\n        cate_id: \"\",\n        content: \"\",\n        // 文章的内容\n        cover_img: null,\n        state: \"\" // 文章的发布状态，可选值有两个：草稿、已发布\n      },\n\n      pubFormRules: {\n        // 表单的验证规则对象\n        title: [{\n          required: true,\n          message: \"请输入文章标题\",\n          trigger: \"blur\"\n        }, {\n          min: 1,\n          max: 30,\n          message: \"文章标题的长度为1-30个字符\",\n          trigger: \"blur\"\n        }],\n        cate_id: [{\n          required: true,\n          message: \"请选择文章标题\",\n          trigger: \"blur\"\n        }],\n        content: [{\n          required: true,\n          message: \"请输入文章内容\",\n          trigger: \"blur\"\n        }]\n      },\n      detailVisible: false,\n      // 控制文章详情对话框的显示与隐藏\n      artDetail: {} // 文章的详情信息对象\n    };\n  },\n\n  methods: {\n    // 重置文章的列表数据\n    resetListFn() {\n      // 1. 重置查询参数对象\n      this.q = {\n        pagenum: 1,\n        pagesize: 10,\n        cate_id: \"\",\n        state: \"\"\n      };\n      // 2. 重新发起请求\n      this.initArtListFn();\n    },\n    // 初始化文章列表\n    async initArtListFn() {\n      const {\n        data: res\n      } = await getArticleListAPI(this.q);\n      if (res.code !== 0) return this.$message.error(\"获取文章列表失败!\");\n      this.artList = res.data;\n      this.total = res.total;\n    },\n    // 发表文章按钮->点击事件->让添加文章对话框出现\n    showPubDialogFn() {\n      this.pubDialogVisible = true;\n    },\n    // 对话框关闭前的回调\n    async handleClose(done) {\n      // 询问用户是否确认关闭对话框\n      const confirmResult = await this.$confirm(\"此操作将导致文章信息丢失, 是否继续?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).catch(err => err);\n\n      // 取消了关闭-阻止住, 什么都不干\n      if (confirmResult === \"cancel\") return;\n      // 确认关闭\n      done();\n    },\n    // 初始化文章分类的列表数据\n    async initCateList() {\n      const {\n        data: res\n      } = await getArtCateListAPI();\n      //   console.log(res);\n      if (res.code === 0) {\n        this.cateList = res.data;\n      }\n    },\n    //模拟文本选择框的点击事件\n    chooseImgFn() {\n      this.$refs.iptFileRef.click();\n    },\n    // 发起请求，发布文章\n    async postArticle() {\n      // 创建 FormData 对象\n      const fd = new FormData();\n      // 向 FormData 中追加数据\n      Object.keys(this.pubForm).forEach(key => {\n        fd.append(key, this.pubForm[key]);\n      });\n      // 发起请求\n      const {\n        data: res\n      } = await uploadArticleAPI(fd);\n      // console.log(res);\n      if (res.code !== 0) return this.$message.error(\"发布文章失败！\");\n      this.$message.success(\"发布文章成功！\");\n      // 关闭对话框\n      this.pubDialogVisible = false;\n      // TODO：刷新文章列表数据\n      this.resetListFn();\n    },\n    // 封面选择改变的事件\n    onCoverChangeFn(e) {\n      // 获取用户选择的文件列表\n      const files = e.target.files;\n      if (files.length === 0) {\n        // 用户没有选择封面\n        this.pubForm.cover_img = null;\n        this.$refs.imgRef.setAttribute(\"src\", defaultImg);\n      } else {\n        // 用户选择了封面\n        this.pubForm.cover_img = files[0];\n        const url = URL.createObjectURL(files[0]);\n        this.$refs.imgRef.setAttribute(\"src\", url);\n      }\n    },\n    pubArticleFn(state) {\n      // 1. 设置发布状态\n      this.pubForm.state = state;\n      // 2. 表单预校验\n      this.$refs.pubFormRef.validate(valid => {\n        if (!valid) return this.$message.error(\"请完善文章信息！\");\n        // 3. 判断是否提供了文章封面\n        if (!this.pubForm.cover_img) return this.$message.error(\"请选择文章封面！\");\n        // 4. TODO：发布文章\n        // console.log(this.pubForm);\n        this.postArticle();\n        /**  // 创建 FormData 对象\n        const fd = new FormData();\n        // 向 FormData 中追加数据(追加数据不改变原来的对象)\n        Object.keys(this.pubForm).forEach((key) => {\n          fd.append(key, this.pubForm[key]);\n        });\n        // fd.append(\"title\", this.pubForm.title);\n        // fd.append(\"cate_id\", this.pubForm.cate_id);\n        // fd.append(\"content\", this.pubForm.content);\n        // fd.append(\"cover_img\", this.pubForm.cover_img);\n        // fd.append(\"state\", this.pubForm.state);\n        // console.log(fd);\n        // 发起请求\n        const { data: res } = uploadArticleAPI(fd);\n        if (res.code !== 0) return this.$message.error(\"发布文章失败！\");\n        this.$message.success(\"发布文章成功！\");\n         // 关闭对话框\n        this.pubDialogVisible = false;\n        // TODO：刷新文章列表数据\n        this.initArtListFn();\n        **/\n      });\n    },\n\n    // 对话框完全关闭之后的处理函数\n    onDialogClosedFn() {\n      // 清空关键数据\n      this.$refs.pubFormRef.resetFields();\n      // 因为这2个变量对应的标签不是表单绑定的, 所以需要单独控制\n      this.pubForm.content = \"\";\n      this.$refs.imgRef.setAttribute(\"src\", defaultImg);\n    },\n    // pageSize 发生了变化\n    handleSizeChangeFn(newSize) {\n      // 为 pagesize 赋值\n      this.q.pagesize = newSize;\n      // 默认展示第一页数据\n      this.q.pagenum = 1;\n      // 重新发起请求\n      this.initArtListFn();\n    },\n    // 页码值发生了变化\n    handleCurrentChangeFn(newPage) {\n      // 为页码值赋值\n      this.q.pagenum = newPage;\n      // 重新发起请求\n      this.initArtListFn();\n    },\n    // 获取文章详情\n    async showDetailFn(id) {\n      const {\n        data: res\n      } = await getArticleDetailAPI(id);\n      if (res.code !== 0) return this.$message.error(\"获取文章详情失败!\");\n      this.artDetail = res.data;\n      // 展示对话框\n      this.detailVisible = true;\n    }\n  }\n};","map":{"version":3,"mappings":"AA+JA;AACA;AACA,SACAA,mBACAC,kBACAC,mBACAC,0BACA;AACA;EACAC;EACAC;IACA;IACA;EACA;EACAC;IACA;MACA;MACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;MAAA;MACAC;QACA;QACAC;QACAP;QACAQ;QAAA;QACAC;QACAR;MACA;;MACAS;QACA;QACAH,QACA;UAAAI;UAAAC;UAAAC;QAAA,GACA;UACAC;UACAC;UACAH;UACAC;QACA,EACA;QACAb,UACA;UAAAW;UAAAC;UAAAC;QAAA,EACA;QACAL,UACA;UAAAG;UAAAC;UAAAC;QAAA;MAEA;MACAG;MAAA;MACAC;IACA;EACA;;EACAC;IACA;IACAC;MACA;MACA;QACArB;QACAC;QACAC;QACAC;MACA;MACA;MACA;IACA;IACA;IACA;MACA;QAAAL;MAAA;MAEA;MACA;MACA;IACA;IACA;IACAwB;MACA;IACA;IACA;IACA;MACA;MACA,0CACA,uBACA,MACA;QACAC;QACAC;QACAC;MACA,EACA;;MAEA;MACA;MACA;MACAC;IACA;IACA;IACA;MACA;QAAA5B;MAAA;MACA;MACA;QACA;MACA;IACA;IACA;IACA6B;MACA;IACA;IACA;IACA;MACA;MACA;MACA;MACAC;QACAC;MACA;MACA;MACA;QAAA/B;MAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IACA;IACAgC;MACA;MACA;MACA;QACA;QACA;QACA;MACA;QACA;QACA;QACA;QACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;QACA;QACA;QACA,6BACA;QACA;QACA;QACA;QACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;MAEA;IACA;;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IACA;IACAC;MACA;MACA;MACA;MACA;IACA;IACA;IACA;MACA;QAAApC;MAAA;MACA;MACA;MACA;MACA;IACA;EACA;AACA","names":["getArtCateListAPI","uploadArticleAPI","getArticleListAPI","getArticleDetailFn","name","created","data","q","pagenum","pagesize","cate_id","state","artList","total","pubDialogVisible","cateList","pubForm","title","content","cover_img","pubFormRules","required","message","trigger","min","max","detailVisible","artDetail","methods","resetListFn","showPubDialogFn","confirmButtonText","cancelButtonText","type","done","chooseImgFn","Object","fd","onCoverChangeFn","pubArticleFn","onDialogClosedFn","handleSizeChangeFn","handleCurrentChangeFn"],"sourceRoot":"src/views/Article","sources":["artList.vue"],"sourcesContent":["<template>\n  <div>\n    <el-card class=\"box-card\">\n      <div slot=\"header\" class=\"clearfix\">\n        <span>文章列表</span>\n      </div>\n      <!-- 搜索区域 -->\n      <div class=\"search-box\">\n        <el-form :inline=\"true\" :model=\"q\">\n          <el-form-item label=\"文章分类\">\n            <el-select\n              v-model=\"q.cate_id\"\n              placeholder=\"请选择分类\"\n              size=\"small\"\n            >\n              <el-option\n                v-for=\"item in cateList\"\n                :key=\"item.id\"\n                :label=\"item.cate_name\"\n                :value=\"item.id\"\n              >\n              </el-option>\n            </el-select>\n          </el-form-item>\n          <el-form-item label=\"发布状态\" style=\"margin-left: 15px\">\n            <el-select v-model=\"q.state\" placeholder=\"请选择状态\" size=\"small\">\n              <el-option label=\"已发布\" value=\"已发布\"></el-option>\n              <el-option label=\"草稿\" value=\"草稿\"></el-option>\n            </el-select>\n          </el-form-item>\n          <el-form-item>\n            <el-button type=\"primary\" size=\"small\" @click=\"initArtListFn\"\n              >筛选</el-button\n            >\n            <el-button type=\"info\" size=\"small\" @click=\"resetListFn\"\n              >重置</el-button\n            >\n          </el-form-item>\n        </el-form>\n        <!-- 发表文章的按钮 -->\n        <el-button\n          type=\"primary\"\n          size=\"small\"\n          class=\"btn-pub\"\n          @click=\"showPubDialogFn\"\n          >发表文章</el-button\n        >\n      </div>\n      <!-- 发表文章的 Dialog 对话框 -->\n      <el-dialog\n        title=\"发表文章\"\n        :visible.sync=\"pubDialogVisible\"\n        fullscreen\n        :before-close=\"handleClose\"\n        @closed=\"onDialogClosedFn\"\n      >\n        <!-- 发布文章的对话框 -->\n        <el-form\n          :model=\"pubForm\"\n          :rules=\"pubFormRules\"\n          ref=\"pubFormRef\"\n          label-width=\"100px\"\n        >\n          <el-form-item label=\"文章标题\" prop=\"title\">\n            <el-input\n              v-model=\"pubForm.title\"\n              placeholder=\"请输入标题\"\n            ></el-input>\n          </el-form-item>\n          <el-form-item label=\"文章分类\" prop=\"cate_id\">\n            <el-select\n              v-model=\"pubForm.cate_id\"\n              placeholder=\"请选择分类\"\n              style=\"width: 100%\"\n            >\n              <!-- 循环渲染分类的可选项 -->\n              <el-option\n                :label=\"item.cate_name\"\n                :value=\"item.id\"\n                v-for=\"item in cateList\"\n                :key=\"item.id\"\n              >\n              </el-option>\n            </el-select>\n          </el-form-item>\n          <el-form-item label=\"文章内容\" prop=\"content\">\n            <!-- 使用 v-model 进行双向的数据绑定 -->\n            <quill-editor v-model=\"pubForm.content\"></quill-editor>\n          </el-form-item>\n          <el-form-item label=\"文章封面\">\n            <!-- 用来显示封面的图片 -->\n            <img\n              src=\"../../assets/images/cover.jpg\"\n              alt=\"\"\n              class=\"cover-img\"\n              ref=\"imgRef\"\n            />\n            <br />\n            <!-- 文件选择框，默认被隐藏 -->\n            <input\n              type=\"file\"\n              style=\"display: none\"\n              ref=\"iptFileRef\"\n              accept=\"image/*\"\n              @change=\"onCoverChangeFn\"\n            />\n            <!-- 选择封面的按钮 -->\n            <el-button type=\"text\" @click=\"chooseImgFn\">+ 选择封面</el-button>\n          </el-form-item>\n\n          <el-form-item>\n            <el-button type=\"primary\" @click=\"pubArticleFn('已发布')\"\n              >发布</el-button\n            >\n            <el-button type=\"info\" @click=\"pubArticleFn('草稿')\"\n              >存为草稿</el-button\n            >\n          </el-form-item>\n        </el-form>\n      </el-dialog>\n      <!-- 查看文章详情的对话框 -->\n      <el-dialog title=\"文章预览\" :visible.sync=\"detailVisible\" width=\"80%\">\n        <span>这是一段信息</span>\n      </el-dialog>\n      <!-- 分页区域 -->\n      <!-- 文章表格区域 -->\n      <el-table :data=\"artList\" style=\"width: 100%\" border stripe>\n        <el-table-column label=\"文章标题\">\n          <template v-slot=\"{ row }\">\n            <el-link type=\"primary\" @click=\"showDetailFn(row.id)\">{{\n              row.title\n            }}</el-link>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"分类\" prop=\"cate_name\"></el-table-column>\n        <el-table-column label=\"发表时间\" prop=\"pub_date\">\n          <template v-slot=\"{ row }\">\n            <span>{{ $formatDate(row.pub_date) }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"状态\" prop=\"state\"></el-table-column>\n        <el-table-column label=\"操作\"></el-table-column>\n      </el-table>\n      <!-- 分页区域 -->\n      <el-pagination\n        @size-change=\"handleSizeChangeFn\"\n        @current-change=\"handleCurrentChangeFn\"\n        :current-page.sync=\"q.pagenum\"\n        :page-sizes=\"[2, 3, 5, 10]\"\n        :page-size.sync=\"q.pagesize\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :total=\"total\"\n      >\n      </el-pagination>\n    </el-card>\n  </div>\n</template>\n\n<script>\n// 导入默认的封面图片\nimport defaultImg from \"@/assets/images/cover.jpg\";\nimport {\n  getArtCateListAPI,\n  uploadArticleAPI,\n  getArticleListAPI,\n  getArticleDetailFn,\n} from \"@/api\";\nexport default {\n  name: \"ArtList\",\n  created() {\n    this.initCateList();\n    this.initArtListFn();\n  },\n  data() {\n    return {\n      // 查询参数对象\n      q: {\n        pagenum: 1,\n        pagesize: 10,\n        cate_id: \"\",\n        state: \"\",\n      },\n      artList: [], // 文章的列表数据\n      total: 0, // 总数据条数\n      pubDialogVisible: false, // 控制发表文章对话框的显示与隐藏\n      cateList: [], // 文章分类\n      pubForm: {\n        // 表单的数据对象\n        title: \"\",\n        cate_id: \"\",\n        content: \"\", // 文章的内容\n        cover_img: null,\n        state: \"\", // 文章的发布状态，可选值有两个：草稿、已发布\n      },\n      pubFormRules: {\n        // 表单的验证规则对象\n        title: [\n          { required: true, message: \"请输入文章标题\", trigger: \"blur\" },\n          {\n            min: 1,\n            max: 30,\n            message: \"文章标题的长度为1-30个字符\",\n            trigger: \"blur\",\n          },\n        ],\n        cate_id: [\n          { required: true, message: \"请选择文章标题\", trigger: \"blur\" },\n        ],\n        content: [\n          { required: true, message: \"请输入文章内容\", trigger: \"blur\" },\n        ],\n      },\n      detailVisible: false, // 控制文章详情对话框的显示与隐藏\n      artDetail: {}, // 文章的详情信息对象\n    };\n  },\n  methods: {\n    // 重置文章的列表数据\n    resetListFn() {\n      // 1. 重置查询参数对象\n      this.q = {\n        pagenum: 1,\n        pagesize: 10,\n        cate_id: \"\",\n        state: \"\",\n      };\n      // 2. 重新发起请求\n      this.initArtListFn();\n    },\n    // 初始化文章列表\n    async initArtListFn() {\n      const { data: res } = await getArticleListAPI(this.q);\n\n      if (res.code !== 0) return this.$message.error(\"获取文章列表失败!\");\n      this.artList = res.data;\n      this.total = res.total;\n    },\n    // 发表文章按钮->点击事件->让添加文章对话框出现\n    showPubDialogFn() {\n      this.pubDialogVisible = true;\n    },\n    // 对话框关闭前的回调\n    async handleClose(done) {\n      // 询问用户是否确认关闭对话框\n      const confirmResult = await this.$confirm(\n        \"此操作将导致文章信息丢失, 是否继续?\",\n        \"提示\",\n        {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"warning\",\n        }\n      ).catch((err) => err);\n\n      // 取消了关闭-阻止住, 什么都不干\n      if (confirmResult === \"cancel\") return;\n      // 确认关闭\n      done();\n    },\n    // 初始化文章分类的列表数据\n    async initCateList() {\n      const { data: res } = await getArtCateListAPI();\n      //   console.log(res);\n      if (res.code === 0) {\n        this.cateList = res.data;\n      }\n    },\n    //模拟文本选择框的点击事件\n    chooseImgFn() {\n      this.$refs.iptFileRef.click();\n    },\n    // 发起请求，发布文章\n    async postArticle() {\n      // 创建 FormData 对象\n      const fd = new FormData();\n      // 向 FormData 中追加数据\n      Object.keys(this.pubForm).forEach((key) => {\n        fd.append(key, this.pubForm[key]);\n      });\n      // 发起请求\n      const { data: res } = await uploadArticleAPI(fd);\n      // console.log(res);\n      if (res.code !== 0) return this.$message.error(\"发布文章失败！\");\n      this.$message.success(\"发布文章成功！\");\n      // 关闭对话框\n      this.pubDialogVisible = false;\n      // TODO：刷新文章列表数据\n      this.resetListFn();\n    },\n    // 封面选择改变的事件\n    onCoverChangeFn(e) {\n      // 获取用户选择的文件列表\n      const files = e.target.files;\n      if (files.length === 0) {\n        // 用户没有选择封面\n        this.pubForm.cover_img = null;\n        this.$refs.imgRef.setAttribute(\"src\", defaultImg);\n      } else {\n        // 用户选择了封面\n        this.pubForm.cover_img = files[0];\n        const url = URL.createObjectURL(files[0]);\n        this.$refs.imgRef.setAttribute(\"src\", url);\n      }\n    },\n    pubArticleFn(state) {\n      // 1. 设置发布状态\n      this.pubForm.state = state;\n      // 2. 表单预校验\n      this.$refs.pubFormRef.validate((valid) => {\n        if (!valid) return this.$message.error(\"请完善文章信息！\");\n        // 3. 判断是否提供了文章封面\n        if (!this.pubForm.cover_img)\n          return this.$message.error(\"请选择文章封面！\");\n        // 4. TODO：发布文章\n        // console.log(this.pubForm);\n        this.postArticle();\n        /**  // 创建 FormData 对象\n        const fd = new FormData();\n        // 向 FormData 中追加数据(追加数据不改变原来的对象)\n        Object.keys(this.pubForm).forEach((key) => {\n          fd.append(key, this.pubForm[key]);\n        });\n        // fd.append(\"title\", this.pubForm.title);\n        // fd.append(\"cate_id\", this.pubForm.cate_id);\n        // fd.append(\"content\", this.pubForm.content);\n        // fd.append(\"cover_img\", this.pubForm.cover_img);\n        // fd.append(\"state\", this.pubForm.state);\n        // console.log(fd);\n        // 发起请求\n        const { data: res } = uploadArticleAPI(fd);\n        if (res.code !== 0) return this.$message.error(\"发布文章失败！\");\n        this.$message.success(\"发布文章成功！\");\n\n        // 关闭对话框\n        this.pubDialogVisible = false;\n        // TODO：刷新文章列表数据\n        this.initArtListFn();\n        **/\n      });\n    },\n    // 对话框完全关闭之后的处理函数\n    onDialogClosedFn() {\n      // 清空关键数据\n      this.$refs.pubFormRef.resetFields();\n      // 因为这2个变量对应的标签不是表单绑定的, 所以需要单独控制\n      this.pubForm.content = \"\";\n      this.$refs.imgRef.setAttribute(\"src\", defaultImg);\n    },\n    // pageSize 发生了变化\n    handleSizeChangeFn(newSize) {\n      // 为 pagesize 赋值\n      this.q.pagesize = newSize;\n      // 默认展示第一页数据\n      this.q.pagenum = 1;\n      // 重新发起请求\n      this.initArtListFn();\n    },\n    // 页码值发生了变化\n    handleCurrentChangeFn(newPage) {\n      // 为页码值赋值\n      this.q.pagenum = newPage;\n      // 重新发起请求\n      this.initArtListFn();\n    },\n    // 获取文章详情\n    async showDetailFn(id) {\n      const { data: res } = await getArticleDetailAPI(id);\n      if (res.code !== 0) return this.$message.error(\"获取文章详情失败!\");\n      this.artDetail = res.data;\n      // 展示对话框\n      this.detailVisible = true;\n    },\n  },\n};\n</script>\n\n<style lang=\"less\" scoped>\n.search-box {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  .btn-pub {\n    margin-top: 5px;\n  }\n}\n// 设置富文本编辑器的默认最小高度\n// ::v-deep作用: 穿透选择, 正常style上加了scope的话, 会给.ql-editor[data-v-hash]属性, 只能选择当前页面标签或者组件的根标签\n// 如果想要选择组件内的标签(那些标签没有data-v-hash值)所以正常选择选不中, 加了::v-deep空格前置的话, 选择器就会变成如下形式\n// [data-v-hash] .ql-editor 这样就能选中组件内的标签的class类名了\n::v-deep .ql-editor {\n  min-height: 300px;\n}\n// 设置图片封面的宽高\n.cover-img {\n  width: 400px;\n  height: 280px;\n  object-fit: cover;\n}\n//美化样式\n.el-pagination {\n  margin-top: 15px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}